# This defines the Service Account (SA) binding in GCP IAM to support the nfs server, using GKE Config Connector following guides here:
# https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
# https://cloud.google.com/kubernetes-engine/docs/tutorials/authenticating-to-cloud-platform

# General idea is:
# 0. Set up the Config Connector
# 1. Create the IAM SA
# 2. Grant permission to the IAM SA
# 3. Either Workload Identity route or
# a. Tell the IAM SA that K8S SA is going to authenticate as it
# b. Tell the deployment to use the K8S SA
# 4. Injecting Secrets
# a. Retrieve the key.json from IAM SA in step 2
# b. Inject as GOOGLE_APPLICATION_CREDENTIALS env variable in the Deployment

# Config Connector didn't work for me, using gcloud CLI instead to accomplish all these.
# Refer to Step 4-6 under the first link > "Configure aplications to use Workload Identity"

# Step 0: set up Config Connector
apiVersion: core.cnrm.cloud.google.com/v1beta1
kind: ConfigConnector
metadata:
  # the name is restricted to ensure that there is only one
  # ConfigConnector resource installed in your cluster
  name: configconnector.core.cnrm.cloud.google.com
spec:
  mode: cluster  # namespaced
  googleServiceAccount: "${IAM_SA_NAME}@${PROJECT}.iam.gserviceaccount.com"
---

# Step 1: set up IAM SA
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMServiceAccount
metadata:
  name: ${IAM_SA_NAME}
#  namespace: nfs
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT}
spec:
  displayName: NFS Server
---

# Step 2: grant IAM permission for the IAM SA
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: nfs-server-role
#  namespace: nfs
spec:
  member: serviceAccount:${IAM_SA_NAME}@${PROJECT}.iam.gserviceaccount.com
  role: roles/pubsub.subscriber  # modify accordingly
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT}
---
  
# Step 3a: tell IAM to allow the K8S SA to authenticate as the IAM SA
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicy
metadata:
  name: nfs-server-iam-policy
#  namespace: nfs
spec:
  resourceRef:
    apiVersion: iam.cnrm.cloud.google.com/v1beta1
    kind: IAMServiceAccount
    name: ${IAM_SA_NAME}
    bindings:
      - role: roles/iam.workloadIdentityUser
        members:
          - serviceAccount:${PROJECT}.svc.id.goog[nfs/nfs-server]  # ${K8S_NAMESPACE}/${K8S_SA_NAME}
---
    
# Step 4a: retrieve key.json from IAM SA
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMServiceAccountKey
metadata:
  name: nfs-server-sa-key
#  namespace: nfs
spec:
  publicKeyType: TYPE_X509_PEM_FILE
  keyAlgorithm: KEY_ALG_RSA_2048
  privateKeyType: TYPE_GOOGLE_CREDENTIALS_FILE
  serviceAccountRef:
    name: ${IAM_SA_NAME}
